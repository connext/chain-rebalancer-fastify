name: Build and Deploy to PROD

on:
  push:
    branches:
      - main

env:
  CONTAINER_IMAGE_NAME: ${{ secrets.CONTAINER_IMAGE_NAME_PROD }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
  DOCKER_BUILDKIT: 1
  HOST: ${{ secrets.HOST_PROD }}
  PORT: ${{ secrets.PORT_PROD }}
  USERNAME: ${{ secrets.USERNAME_PROD }}
  KEY: ${{ secrets.SSHKEY_PROD }}

jobs:

  build:
    name: Build and Push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Login to repository
      run: |
        docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_PASSWORD }}"
    - name: Build the image
      run: |
        docker build \
          --cache-from $CONTAINER_IMAGE_NAME:latest \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --tag $CONTAINER_IMAGE_NAME:latest --tag $CONTAINER_IMAGE_NAME:${GITHUB_SHA} .
    - name: Push the image
      run: |
        docker push $CONTAINER_IMAGE_NAME:latest
        docker push $CONTAINER_IMAGE_NAME:${GITHUB_SHA}

  deploy:
    name: Deploy to PROD
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Set tag
      id: vars
      run: |
        echo "::set-output name=image::${CONTAINER_IMAGE_NAME}"
        echo "::set-output name=tag::${GITHUB_SHA}"
    - name: Run deploy script
      uses: appleboy/ssh-action@master
      with:
        HOST: ${HOST}
        PORT: ${PORT}
        USERNAME: ${USERNAME}
        KEY: ${SSHKEY}
        script: deploy.connext ${{ steps.vars.outputs.image }} ${{ steps.vars.outputs.tag }}


  notify:
    if: always()
    name: Discord notify
    needs:
      - build
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: 'Setup metadata'
        id: setup
        run: |
          gitref_path="${{ github.ref }}"
          gitref_path=${gitref_path/refs\/heads/tree} # for refs/heads/my-branch
          gitref_path=${gitref_path/refs\/tags/tree}  # for refs/tags/v1.0.0
          gitref_path=${gitref_path#refs\/}           # for refs/pull/123/merge
          gitref_path=${gitref_path%/merge}           # for refs/pull/123/merge
          echo "::set-output name=gitref-path::$gitref_path"
      - name: Prepare Discord message
        id: status
        uses: actions/github-script@v3
        with:
          script: |
            var gitref_path = "${{ steps.setup.outputs.gitref-path }}"
            ////////////////////////////////////
            // retrieve workflow run data
            ////////////////////////////////////
            console.log("get workflow run")
            const wf_run = await github.actions.getWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.run_id }}
            })
            console.log(wf_run.data)
            console.log("get jobs for workflow run:", wf_run.data.jobs_url)
            const jobs_response = await github.request(wf_run.data.jobs_url)
            ////////////////////////////////////
            // build Discord notification message
            ////////////////////////////////////
            // some utility functions
            var date_diff_func = function(start, end) {
                var duration = end - start
                // format the duration
                var delta = duration / 1000
                var days = Math.floor(delta / 86400)
                delta -= days * 86400
                var hours = Math.floor(delta / 3600) % 24
                delta -= hours * 3600
                var minutes = Math.floor(delta / 60) % 60
                delta -= minutes * 60
                var seconds = Math.floor(delta % 60)
                var format_func = function(v, text, check) {
                    if (v <= 0 && check) {
                        return ""
                    } else {
                        return v + text
                    }
                }
                return format_func(days, "d", true) + format_func(hours, "h", true) + format_func(minutes, "m", true) + format_func(seconds, "s", false)
            }
            var status_icon_func = function(s) {
                switch (s) {
                case "w_success":
                    return ":white_check_mark:"
                case "w_failure":
                    return ":no_entry:"
                case "w_cancelled":
                    return ":warning:"
                case "success":
                    return "\u2713"
                case "failure":
                    return "\u2717"
                default:
                    return "\u20e0"
                }
            }
            var status_color_func = function(s) {
                switch (s) {
                case "w_success":
                    return "2664261"
                case "w_failure":
                    return "ee1c1c"
                case "w_cancelled":
                    return "c5a319"
                case "success":
                    return "2664261"
                case "failure":
                    return "ee1c1c"
                default:
                    return "2664261"
                }
            }
            const commit = "${{ github.sha }}".substr(0, 6)
            var pr = ""
            for (p of wf_run.data.pull_requests) {
              pr += ",<"+ p.url + "|#" + p.number + ">"
            }
            if (pr != "") {
              pr = "for " + pr.substr(1)
            }
            // build the message
            var job_blocks = []
            var is_wf_success = true
            var is_wf_failure = false
            for (j of jobs_response.data.jobs) {
                console.log(j.name, ":", j.status, j.conclusion, j.started_at, j.completed_at)
                // ignore the current job running this script
                if (j.status != "completed") {
                    continue
                }
                if (j.conclusion != "success") {
                  is_wf_success = false
                }
                if (j.conclusion == "failure") {
                  is_wf_failure = true
                }
                job_blocks.push({
                    "name": status_icon_func(j.conclusion) + "["+ j.name +"]("+ j.html_url +")",
                    "value": date_diff_func(new Date(j.started_at), new Date(j.completed_at)),
                    "inline": true
                })
            }
            var workflow_status = "w_cancelled"
            var msg_status = "Canceled"
            if (is_wf_success) {
              workflow_status = "w_success"
              msg_status = "Success"
            } else if (is_wf_failure) {
              workflow_status = "w_failure"
              msg_status = "Failed"
            }

            var header_blocks = [
              {
                "name": "Repository",
                "value": "["+ ${{ github.repository }} +"](https://github.com/connext/"+${{ github.repository }}+")",
                "inline": true
              },
              {
                "name": "Ref",
                "value": ${{ github.ref }},
                "inline": true
              },
              {
                "name": "Event",
                "value": ${wf_run.data.event},
                "inline": true
              },
              {
                "name": "Commit",
                "value": "[`"+ ${wf_run.data.head_commit.id.substr(0, 8)} +"`](https://github.com/"+ ${{ github.repository }} +"/commit/"+ ${wf_run.data.head_commit.id} +") "+ ${wf_run.data.head_commit.message},
                "inline": true
              },
              {
                "name": "Triggered by",
                "value": ${wf_run.data.head_commit.author.name},
                "inline": true
              },
              {
                "name": "Workflow",
                "value": "[#"+ ${{ github.run_number }} +"]("+ wf_run.data.html_url +") +" took "+ date_diff_func(new Date(wf_run.data.created_at), new Date(wf_run.data.updated_at)),
                "inline": true
              }
            ]

            var discord_msg = {
              "embeds": [
                {
                  "color": status_color_func(workflow_status),
                  "title": msg_status + " *${{ github.workflow }}* ",
                  "fields": header_blocks
                }
              ]
            }
            return discord_msg
      - name: Send to Discord
        if: success()
        run: |
          curl -X POST $DISCORD_WEBHOOK_URL -H "Content-type: application/json" -H "Accept: application/json" --data '${{ steps.status.outputs.result }}'
