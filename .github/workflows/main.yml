name: Build and Deploy to PROD

on:
  push:
    branches:
      - main

env:
  CONTAINER_IMAGE_NAME: ${{ secrets.CONTAINER_IMAGE_NAME_PROD }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
  DOCKER_BUILDKIT: 1
  HOST: ${{ secrets.HOST_PROD }}
  PORT: ${{ secrets.PORT_PROD }}
  USERNAME: ${{ secrets.USERNAME_PROD }}
  KEY: ${{ secrets.SSHKEY_PROD }}

jobs:

  build:
    name: Build and Push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Login to repository
      run: |
        docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_PASSWORD }}"
    - name: Build the image
      run: |
        docker build \
          --cache-from $CONTAINER_IMAGE_NAME:latest \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --tag $CONTAINER_IMAGE_NAME:latest --tag $CONTAINER_IMAGE_NAME:${GITHUB_SHA} .
    - name: Push the image
      run: |
        docker push $CONTAINER_IMAGE_NAME:latest
        docker push $CONTAINER_IMAGE_NAME:${GITHUB_SHA}

  deploy:
    name: Deploy to PROD
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Set tag
      id: vars
      run: |
        echo "::set-output name=image::${CONTAINER_IMAGE_NAME}"
        echo "::set-output name=tag::${GITHUB_SHA}"
    - name: Run deploy script
      uses: appleboy/ssh-action@master
      with:
        HOST: ${HOST}
        PORT: ${PORT}
        USERNAME: ${USERNAME}
        KEY: ${SSHKEY}
        script: deploy.connext ${{ steps.vars.outputs.image }} ${{ steps.vars.outputs.tag }}


  notify:
    if: always()
    name: Discord notify
    needs:
      - build
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: Sending notify
        uses: sarisia/actions-status-discord@v1.8.3
        with:
          webhook: ${DISCORD_WEBHOOK_URL}
